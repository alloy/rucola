require 'rake/testtask'
require 'rucola/xcode'
require 'rucola/rucola_support/core_ext/string'

# Application configuration
APPNAME               = "<%= name %>"
TARGET                = "#{APPNAME}.app"
#APPVERSION           = "rev#{`svn info`[/Revision: (\d+)/, 1]}"
APPVERSION            = Time.now.strftime("%Y-%m-%d")
PUBLISH               = 'yourname@yourhost:path'



# set the env, default to debug if we are running a rake task.
RUBYCOCOA_ENV = ENV['RUBYCOCOA_ENV'].nil? ? 'debug' : ENV['RUBYCOCOA_ENV']
RUBYCOCOA_ROOT = ENV['RUBYCOCOA_ROOT'].nil? ? File.dirname(__FILE__) : ENV['RUBYCOCOA_ROOT']
puts "RUNNING IN MODE: #{RUBYCOCOA_ENV.upcase}\n\n"

# TASKS

task :default => 'xcode:build'

Rake::TestTask.new do |t|
  t.test_files = FileList['test/*/test_*.rb']
  t.verbose = true
end

namespace :xcode do
  
  desc 'Builds the application'
  task :build do
    config = RUBYCOCOA_ENV.capitalize
    sh "xcodebuild -configuration #{config}"
    # launch app with the correct env set
    sh "RUBYCOCOA_ENV='#{RUBYCOCOA_ENV}' RUBYCOCOA_ROOT='#{RUBYCOCOA_ROOT}' ./build/#{config}/#{TARGET}/Contents/MacOS/#{APPNAME}"
  end
  
end

namespace :ib do
  RB_NIB_TOOL = '/Library/Frameworks/RubyCocoa.framework/Versions/A/Tools/rb_nibtool.rb'
  
  desc 'Updates the nibs from their corresponding ruby source files'
  task :update do
    nibs = FileList['app/views/*.nib'].reject {|file| File.extname(file) != '.nib' or file.include? '~' }
    nibs.each do |nib|
      # Because rb_nibtool will use RubyNode which doesn't eval so other source files
      # aren't required by the 'require' statement. Some classes that have superclasses
      # that are unknown to the classes.nib file don't show up in the classes list in IB.
      # And even worse a window controller for instance that doesn't know in IB that it
      # inherits from NSWindowController will not have it's outlets set ok.
      #
      # So until this is fixed in rb_nibtool, we will simply create a intermediate file
      # that holds only the class definitions for any class that is needed in order to
      # create a valid nib.
      controller = "#{File.basename(nib)[0..-5].snake_case}_controller.rb"
      tmp_file = "/tmp/#{controller}.tmp"
      File.open(tmp_file, 'w') do |file|
        file.write( File.read("misc/nibtool_helper.rb") + "\n\n" + File.read("app/controllers/#{controller}") )
      end
      ruby "#{RB_NIB_TOOL} --update --nib #{nib} --file #{tmp_file}"
    end
    
    #ruby "#{RB_NIB_TOOL} --update --file app/controllers/application_controller.rb --nib misc/English.lproj/MainMenu.nib"
  end
  
end

namespace :rc do
  
  namespace :freeze do
    
    RUBYCOCOA_FRAMEWORK_PATH_CURRENT = 'vendor/rubycocoa'
    desc 'Freezes the current used version of RubyCocoa in /Library/Frameworks'
    task :current do
      mkdir_p RUBYCOCOA_FRAMEWORK_PATH_CURRENT unless File.exist? RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      puts "Copying framework."
      cp_r '/Library/Frameworks/RubyCocoa.framework', RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      # add the new RubyCocoa framework to the project and bundle it when building the application
      Rake::Task['rc:freeze:bundle'].invoke
    end
    
    RUBYCOCOA_FRAMEWORK_PATH_EDGE = 'vendor/rubycocoa/framework/build/Default'
    desc 'Freezes the current edge version of RubyCocoa'
    task :edge do
      if File.exist? 'vendor/rubycocoa'
        sh 'cd vendor/rubycocoa && svn up'
      else
        mkdir 'vendor' unless File.exist? 'vendor'
        sh 'cd vendor && svn co https://rubycocoa.svn.sourceforge.net/svnroot/rubycocoa/trunk/src rubycocoa'
      end
      sh 'cd vendor/rubycocoa && rake'
      
      # add the new RubyCocoa framework to the project and bundle it when building the application
      Rake::Task['rc:freeze:bundle'].invoke
    end
    
    desc 'Bundle the frozen RubyCocoa framework with the application'
    task :bundle do
      if File.exist? RUBYCOCOA_FRAMEWORK_PATH_EDGE
        framework_location = RUBYCOCOA_FRAMEWORK_PATH_EDGE
      else
        framework_location = RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      end
      project = Rucola::Xcode.new File.expand_path("../#{APPNAME}.xcodeproj", __FILE__)
      project.change_rubycocoa_framework_location "#{framework_location}/RubyCocoa.framework"
      project.bundle_rubycocoa_framework
      project.save
    end
  end
  
end