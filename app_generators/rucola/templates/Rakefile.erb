require 'rake/testtask'

require 'osx/cocoa'
require 'rucola/xcode'
require 'rucola/nib'
require 'rucola/rucola_support'

# Application configuration
APPNAME               = "<%= name %>"
TARGET                = "#{APPNAME}.app"
#APPVERSION           = "rev#{`svn info`[/Revision: (\d+)/, 1]}"
APPVERSION            = Time.now.strftime("%Y-%m-%d")
PUBLISH               = 'yourname@yourhost:path'



# set the env, default to debug if we are running a rake task.
RUBYCOCOA_ENV = ENV['RUBYCOCOA_ENV'].nil? ? 'debug' : ENV['RUBYCOCOA_ENV']
RUBYCOCOA_ROOT = ENV['RUBYCOCOA_ROOT'].nil? ? File.dirname(__FILE__) : ENV['RUBYCOCOA_ROOT']
puts "RUNNING IN MODE: #{RUBYCOCOA_ENV.upcase}\n\n"

# FIXME: We also need to check if the user uses a frozen rc framework
RUBYCOCOA_FRAMEWORK = OSX::NSBundle.bundleWithIdentifier('com.apple.rubycocoa').bundlePath.to_s

# TASKS

task :default => 'xcode:build'

Rake::TestTask.new do |t|
  t.test_files = FileList['test/*/test_*.rb']
  t.verbose = true
end

namespace :xcode do
  
  desc 'Builds the application'
  task :build do
    config = RUBYCOCOA_ENV.capitalize
    sh "xcodebuild -configuration #{config}"
    # get the users build dir
    prefs = OSX::NSUserDefaults.standardUserDefaults
    prefs.addSuiteNamed 'com.apple.xcode'
    build_dir = prefs['PBXApplicationwideBuildSettings']['SYMROOT'] || './build'
    # launch app with the correct env set
    sh "RUBYCOCOA_ENV='#{RUBYCOCOA_ENV}' RUBYCOCOA_ROOT='#{RUBYCOCOA_ROOT}' #{build_dir}/#{config}/#{TARGET}/Contents/MacOS/#{APPNAME}"
  end
  
end

namespace :ib do
  RB_NIB_TOOL = "#{RUBYCOCOA_FRAMEWORK}/Versions/Current/Tools/rb_nibtool.rb"
  
  def create_tmp_helper_file(controller_name)
    tmp_file = "/tmp/#{controller_name.snake_case}.rb.tmp"
    File.open(tmp_file, 'w') do |file|
      file.write( File.read("misc/nibtool_helper.rb") + "\n\n" + File.read("app/controllers/#{controller_name.snake_case}.rb") )
    end
    tmp_file
  end
  
  def name_for_controller(controller_path)
    File.basename(controller_path)[0..-4].camel_case
  end
  
  desc 'Updates the nibs from their corresponding ruby source files'
  task :update do
    controllers = FileList['app/controllers/*.rb']
    nibs = FileList['app/views/*.nib', 'misc/English.lproj/MainMenu.nib'].reject {|file| File.extname(file) != '.nib' or file.include? '~' }
    
    controllers.each do |controller_path|
      controller_name = name_for_controller(controller_path)
      nibs.each do |nib|
        if Rucola::Nib::Classes.open("#{nib}/classes.nib").has_class? controller_name
          @tmp_file ||= create_tmp_helper_file(controller_name)
          puts "      update  #{nib}: #{controller_name}"
          `ruby #{RB_NIB_TOOL} --update --nib #{nib} --file #{@tmp_file}`
        end
      end
      @tmp_file = nil
    end
  end
  
end

namespace :rc do
  
  namespace :freeze do
    
    RUBYCOCOA_FRAMEWORK_PATH_CURRENT = 'vendor/rubycocoa'
    desc "Freezes the current used version of RubyCocoa in #{RUBYCOCOA_FRAMEWORK}"
    task :current do
      mkdir_p RUBYCOCOA_FRAMEWORK_PATH_CURRENT unless File.exist? RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      puts "Copying framework."
      cp_r RUBYCOCOA_FRAMEWORK, RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      # add the new RubyCocoa framework to the project and bundle it when building the application
      Rake::Task['rc:freeze:bundle'].invoke
    end
    
    RUBYCOCOA_FRAMEWORK_PATH_EDGE = 'vendor/rubycocoa/framework/build/Default'
    desc 'Freezes the current edge version of RubyCocoa'
    task :edge do
      if File.exist? 'vendor/rubycocoa'
        sh 'cd vendor/rubycocoa && svn up'
      else
        mkdir 'vendor' unless File.exist? 'vendor'
        sh 'cd vendor && svn co https://rubycocoa.svn.sourceforge.net/svnroot/rubycocoa/trunk/src rubycocoa'
      end
      sh 'cd vendor/rubycocoa && rake'
      
      # add the new RubyCocoa framework to the project and bundle it when building the application
      Rake::Task['rc:freeze:bundle'].invoke
    end
    
    desc 'Bundle the frozen RubyCocoa framework with the application'
    task :bundle do
      if File.exist? RUBYCOCOA_FRAMEWORK_PATH_EDGE
        framework_location = RUBYCOCOA_FRAMEWORK_PATH_EDGE
      else
        framework_location = RUBYCOCOA_FRAMEWORK_PATH_CURRENT
      end
      project = Rucola::Xcode.new File.expand_path("../#{APPNAME}.xcodeproj", __FILE__)
      project.change_rubycocoa_framework_location "#{framework_location}/RubyCocoa.framework"
      project.bundle_rubycocoa_framework
      project.save
    end
  end
  
end